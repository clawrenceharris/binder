function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from "react";
import { MediaClipboard, listenToClipboardChanges, stopListeningToClipboardChanges, listenToClipboardRemove, stopListeningToClipboardRemove, getClipboardMediaSource } from "./MediaClipboard";
export const ClipboardContext = React.createContext({
  clipboard: MediaClipboard.clipboard,
  mediaSource: MediaClipboard.mediaSource || null
});
export class ClipboardProvider extends React.Component {
  constructor(props) {
    super(props); // @ts-ignore

    _defineProperty(this, "handleClipboardChange", clipboard => {
      getClipboardMediaSource().then(mediaSource => {
        // @ts-ignore
        this.setState({
          contextValue: ClipboardProvider.buildContextValue(clipboard, mediaSource || null)
        });
      });
    });

    _defineProperty(this, "updateMediaSource", () => {
      getClipboardMediaSource().then(mediaSource => {
        // @ts-ignore
        this.setState({
          contextValue: ClipboardProvider.buildContextValue( // @ts-ignore
          this.state.contextValue.clipboard, mediaSource)
        });
      });
    });

    this.state = {
      contextValue: ClipboardProvider.buildContextValue(MediaClipboard.clipboard, MediaClipboard.mediaSource || null)
    };
  }

  static buildContextValue(clipboard, mediaSource) {
    return {
      clipboard,
      mediaSource: !mediaSource || Object.keys(mediaSource).length === 0 ? null : mediaSource
    };
  }

  componentDidMount() {
    listenToClipboardChanges(this.handleClipboardChange);
    listenToClipboardRemove(this.handleClipboardChange);

    if ( // @ts-ignore
    this.state.contextValue.clipboard.hasImages && // @ts-ignore
    !this.state.contextValue.mediaSource) {
      this.updateMediaSource();
    }
  }

  componentWillUnmount() {
    stopListeningToClipboardChanges(this.handleClipboardChange);
    stopListeningToClipboardRemove(this.handleClipboardChange);
  }

  render() {
    // @ts-ignore
    const {
      children
    } = this.props;
    return (// @ts-ignore
      React.createElement(ClipboardContext.Provider, {
        value: this.state.contextValue
      }, children)
    );
  }

}
//# sourceMappingURL=MediaClipboardContext.js.map