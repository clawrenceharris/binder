{"version":3,"sources":["MediaClipboardContext.tsx"],"names":["ClipboardContext","React","createContext","clipboard","MediaClipboard","mediaSource","ClipboardProvider","Component","constructor","props","then","setState","contextValue","buildContextValue","state","Object","keys","length","componentDidMount","handleClipboardChange","hasImages","updateMediaSource","componentWillUnmount","render","children"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAgBO,MAAMA,gBAAgB,GAAGC,KAAK,CAACC,aAAN,CAA+B;AAC7DC,EAAAA,SAAS,EAAEC,+BAAeD,SADmC;AAE7DE,EAAAA,WAAW,EAAED,+BAAeC,WAAf,IAA8B;AAFkB,CAA/B,CAAzB;;;AAWA,MAAMC,iBAAN,SAAgCL,KAAK,CAACM,SAAtC,CAGL;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAgC;AACzC,UAAMA,KAAN,EADyC,CAGzC;;AAHyC,mDAyBlBN,SAAD,IAAkC;AACxD,qDAA0BO,IAA1B,CAA+BL,WAAW,IAAI;AAC5C;AACA,aAAKM,QAAL,CAAc;AACZC,UAAAA,YAAY,EAAEN,iBAAiB,CAACO,iBAAlB,CACZV,SADY,EAEZE,WAAW,IAAI,IAFH;AADF,SAAd;AAMD,OARD;AASD,KAnC0C;;AAAA,+CAmDvB,MAAM;AACxB,qDAA0BK,IAA1B,CAA+BL,WAAW,IAAI;AAC5C;AACA,aAAKM,QAAL,CAAc;AACZC,UAAAA,YAAY,EAAEN,iBAAiB,CAACO,iBAAlB,EACZ;AACA,eAAKC,KAAL,CAAWF,YAAX,CAAwBT,SAFZ,EAGZE,WAHY;AADF,SAAd;AAOD,OATD;AAUD,KA9D0C;;AAIzC,SAAKS,KAAL,GAAa;AACXF,MAAAA,YAAY,EAAEN,iBAAiB,CAACO,iBAAlB,CACZT,+BAAeD,SADH,EAEZC,+BAAeC,WAAf,IAA8B,IAFlB;AADH,KAAb;AAMD;;AAED,SAAOQ,iBAAP,CACEV,SADF,EAEEE,WAFF,EAGa;AACX,WAAO;AACLF,MAAAA,SADK;AAELE,MAAAA,WAAW,EACT,CAACA,WAAD,IAAgBU,MAAM,CAACC,IAAP,CAAYX,WAAZ,EAAyBY,MAAzB,KAAoC,CAApD,GACI,IADJ,GAEIZ;AALD,KAAP;AAOD;;AAcDa,EAAAA,iBAAiB,GAAG;AAClB,kDAAyB,KAAKC,qBAA9B;AACA,iDAAwB,KAAKA,qBAA7B;;AAEA,SACE;AACA,SAAKL,KAAL,CAAWF,YAAX,CAAwBT,SAAxB,CAAkCiB,SAAlC,IACA;AACA,KAAC,KAAKN,KAAL,CAAWF,YAAX,CAAwBP,WAJ3B,EAKE;AACA,WAAKgB,iBAAL;AACD;AACF;;AAeDC,EAAAA,oBAAoB,GAAG;AACrB,yDAAgC,KAAKH,qBAArC;AACA,wDAA+B,KAAKA,qBAApC;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAe,KAAKf,KAA1B;AACA,WACE;AACA,0BAAC,gBAAD,CAAkB,QAAlB;AAA2B,QAAA,KAAK,EAAE,KAAKK,KAAL,CAAWF;AAA7C,SACGY,QADH;AAFF;AAMD;;AA/ED","sourcesContent":["import * as React from \"react\";\nimport {\n  MediaClipboard,\n  ClipboardResponse,\n  listenToClipboardChanges,\n  stopListeningToClipboardChanges,\n  listenToClipboardRemove,\n  stopListeningToClipboardRemove,\n  getClipboardMediaSource,\n  MediaSource\n} from \"./MediaClipboard\";\n\nexport type Clipboard = {\n  clipboard: ClipboardResponse;\n  mediaSource: MediaSource | null;\n};\n\nexport const ClipboardContext = React.createContext<Clipboard>({\n  clipboard: MediaClipboard.clipboard,\n  mediaSource: MediaClipboard.mediaSource || null\n});\n\nexport type ClipboardProviderState = {\n  contextValue: Clipboard;\n};\n\nexport type ClipboardProviderProps = { children: any };\n\nexport class ClipboardProvider extends React.Component<\n  ClipboardProviderProps,\n  ClipboardProviderState\n> {\n  constructor(props: ClipboardProviderProps) {\n    super(props);\n\n    // @ts-ignore\n    this.state = {\n      contextValue: ClipboardProvider.buildContextValue(\n        MediaClipboard.clipboard,\n        MediaClipboard.mediaSource || null\n      )\n    };\n  }\n\n  static buildContextValue(\n    clipboard: ClipboardResponse,\n    mediaSource: MediaSource | null\n  ): Clipboard {\n    return {\n      clipboard,\n      mediaSource:\n        !mediaSource || Object.keys(mediaSource).length === 0\n          ? null\n          : mediaSource\n    };\n  }\n\n  handleClipboardChange = (clipboard: ClipboardResponse) => {\n    getClipboardMediaSource().then(mediaSource => {\n      // @ts-ignore\n      this.setState({\n        contextValue: ClipboardProvider.buildContextValue(\n          clipboard,\n          mediaSource || null\n        )\n      });\n    });\n  };\n\n  componentDidMount() {\n    listenToClipboardChanges(this.handleClipboardChange);\n    listenToClipboardRemove(this.handleClipboardChange);\n\n    if (\n      // @ts-ignore\n      this.state.contextValue.clipboard.hasImages &&\n      // @ts-ignore\n      !this.state.contextValue.mediaSource\n    ) {\n      this.updateMediaSource();\n    }\n  }\n\n  updateMediaSource = () => {\n    getClipboardMediaSource().then(mediaSource => {\n      // @ts-ignore\n      this.setState({\n        contextValue: ClipboardProvider.buildContextValue(\n          // @ts-ignore\n          this.state.contextValue.clipboard,\n          mediaSource\n        )\n      });\n    });\n  };\n\n  componentWillUnmount() {\n    stopListeningToClipboardChanges(this.handleClipboardChange);\n    stopListeningToClipboardRemove(this.handleClipboardChange);\n  }\n\n  render() {\n    // @ts-ignore\n    const { children } = this.props;\n    return (\n      // @ts-ignore\n      <ClipboardContext.Provider value={this.state.contextValue}>\n        {children}\n      </ClipboardContext.Provider>\n    );\n  }\n}\n"]}