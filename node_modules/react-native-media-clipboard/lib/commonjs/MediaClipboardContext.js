"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClipboardProvider = exports.ClipboardContext = void 0;

var React = _interopRequireWildcard(require("react"));

var _MediaClipboard = require("./MediaClipboard");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const ClipboardContext = React.createContext({
  clipboard: _MediaClipboard.MediaClipboard.clipboard,
  mediaSource: _MediaClipboard.MediaClipboard.mediaSource || null
});
exports.ClipboardContext = ClipboardContext;

class ClipboardProvider extends React.Component {
  constructor(props) {
    super(props); // @ts-ignore

    _defineProperty(this, "handleClipboardChange", clipboard => {
      (0, _MediaClipboard.getClipboardMediaSource)().then(mediaSource => {
        // @ts-ignore
        this.setState({
          contextValue: ClipboardProvider.buildContextValue(clipboard, mediaSource || null)
        });
      });
    });

    _defineProperty(this, "updateMediaSource", () => {
      (0, _MediaClipboard.getClipboardMediaSource)().then(mediaSource => {
        // @ts-ignore
        this.setState({
          contextValue: ClipboardProvider.buildContextValue( // @ts-ignore
          this.state.contextValue.clipboard, mediaSource)
        });
      });
    });

    this.state = {
      contextValue: ClipboardProvider.buildContextValue(_MediaClipboard.MediaClipboard.clipboard, _MediaClipboard.MediaClipboard.mediaSource || null)
    };
  }

  static buildContextValue(clipboard, mediaSource) {
    return {
      clipboard,
      mediaSource: !mediaSource || Object.keys(mediaSource).length === 0 ? null : mediaSource
    };
  }

  componentDidMount() {
    (0, _MediaClipboard.listenToClipboardChanges)(this.handleClipboardChange);
    (0, _MediaClipboard.listenToClipboardRemove)(this.handleClipboardChange);

    if ( // @ts-ignore
    this.state.contextValue.clipboard.hasImages && // @ts-ignore
    !this.state.contextValue.mediaSource) {
      this.updateMediaSource();
    }
  }

  componentWillUnmount() {
    (0, _MediaClipboard.stopListeningToClipboardChanges)(this.handleClipboardChange);
    (0, _MediaClipboard.stopListeningToClipboardRemove)(this.handleClipboardChange);
  }

  render() {
    // @ts-ignore
    const {
      children
    } = this.props;
    return (// @ts-ignore
      React.createElement(ClipboardContext.Provider, {
        value: this.state.contextValue
      }, children)
    );
  }

}

exports.ClipboardProvider = ClipboardProvider;
//# sourceMappingURL=MediaClipboardContext.js.map