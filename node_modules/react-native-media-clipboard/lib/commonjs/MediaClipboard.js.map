{"version":3,"sources":["MediaClipboard.ts"],"names":["MediaClipboard","NativeModules","process","env","NODE_ENV","Platform","OS","console","log","Error","clipboard","urls","strings","hasImages","hasURLs","hasStrings","mediaSource","emitter","select","ios","NativeEventEmitter","android","listenToClipboardChanges","listener","addListener","stopListeningToClipboardChanges","removeListener","listenToClipboardRemove","stopListeningToClipboardRemove","getClipboardContents","Promise","resolve","reject","getContent","err","contents","getClipboardMediaSource","global","Clipboard","getMediaSource","clipboardMediaSource","_","content"],"mappings":"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","sourcesContent":["import { NativeModules, NativeEventEmitter, Platform } from \"react-native\";\n\nexport type MediaSource = {\n  uri: string;\n  mimeType: string;\n  width: number;\n  height: number;\n};\n\nexport type ClipboardResponse = {\n  urls: Array<string>;\n  strings: Array<string>;\n  hasImages: Boolean;\n  hasURLs: Boolean;\n  hasStrings: Boolean;\n};\n\nexport let MediaClipboard = NativeModules[\"MediaClipboard\"];\n\nif (\n  // @ts-ignore\n  process.env.NODE_ENV !== \"production\" &&\n  !MediaClipboard &&\n  Platform.OS === \"ios\"\n) {\n  console.log({ MediaClipboard });\n  throw new Error(\n    \"Please ensure react-native-media-clipboard is linked, that you ran pod install, that you imported <react-native-media-clipboard/MediaClipboard.h> in your AppDelegate.m, and that you re-built the iOS app.\"\n  );\n} else if (!MediaClipboard && Platform.OS !== \"ios\") {\n  MediaClipboard = {\n    clipboard: {\n      urls: [],\n      strings: [],\n      hasImages: false,\n      hasURLs: false,\n      hasStrings: false\n    },\n    mediaSource: null\n  };\n}\n\nconst emitter = Platform.select({\n  ios: new NativeEventEmitter(MediaClipboard),\n  android: null\n});\n\nexport const listenToClipboardChanges = listener =>\n  emitter && emitter.addListener(\"MediaClipboardChange\", listener);\n\nexport const stopListeningToClipboardChanges = listener =>\n  emitter && emitter.removeListener(\"MediaClipboardChange\", listener);\n\nexport const listenToClipboardRemove = listener =>\n  emitter && emitter.addListener(\"MediaClipboardRemove\", listener);\n\nexport const stopListeningToClipboardRemove = listener =>\n  emitter && emitter.removeListener(\"MediaClipboardRemove\", listener);\n\nexport const getClipboardContents = (): Promise<ClipboardResponse> => {\n  return new Promise((resolve, reject) => {\n    if (Platform.OS === \"android\") {\n      resolve({\n        urls: [],\n        strings: [],\n        hasImages: false,\n        hasURLs: false,\n        hasStrings: false\n      });\n      return;\n    }\n\n    MediaClipboard.getContent((err, contents) => {\n      if (err) {\n        reject(err);\n        return;\n      } else {\n        resolve(contents);\n      }\n    });\n  });\n};\n\nexport const getClipboardMediaSource = (): Promise<MediaSource | null> => {\n  if (Platform.OS === \"android\") {\n    return Promise.resolve(null);\n  }\n\n  // @ts-ignore\n  if (typeof global.Clipboard !== \"undefined\") {\n    // @ts-ignore\n    return global.Clipboard.getMediaSource();\n  } else {\n    return new Promise(resolve =>\n      MediaClipboard.clipboardMediaSource((_, content) => {\n        resolve(content);\n        return;\n      })\n    );\n  }\n};\n"]}