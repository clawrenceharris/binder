"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClipboardMediaSource = exports.getClipboardContents = exports.stopListeningToClipboardRemove = exports.listenToClipboardRemove = exports.stopListeningToClipboardChanges = exports.listenToClipboardChanges = exports.MediaClipboard = void 0;

var _reactNative = require("react-native");

let MediaClipboard = _reactNative.NativeModules["MediaClipboard"];
exports.MediaClipboard = MediaClipboard;

if ( // @ts-ignore
process.env.NODE_ENV !== "production" && !MediaClipboard && _reactNative.Platform.OS === "ios") {
  console.log({
    MediaClipboard
  });
  throw new Error("Please ensure react-native-media-clipboard is linked, that you ran pod install, that you imported <react-native-media-clipboard/MediaClipboard.h> in your AppDelegate.m, and that you re-built the iOS app.");
} else if (!MediaClipboard && _reactNative.Platform.OS !== "ios") {
  exports.MediaClipboard = MediaClipboard = {
    clipboard: {
      urls: [],
      strings: [],
      hasImages: false,
      hasURLs: false,
      hasStrings: false
    },
    mediaSource: null
  };
}

const emitter = _reactNative.Platform.select({
  ios: new _reactNative.NativeEventEmitter(MediaClipboard),
  android: null
});

const listenToClipboardChanges = listener => emitter && emitter.addListener("MediaClipboardChange", listener);

exports.listenToClipboardChanges = listenToClipboardChanges;

const stopListeningToClipboardChanges = listener => emitter && emitter.removeListener("MediaClipboardChange", listener);

exports.stopListeningToClipboardChanges = stopListeningToClipboardChanges;

const listenToClipboardRemove = listener => emitter && emitter.addListener("MediaClipboardRemove", listener);

exports.listenToClipboardRemove = listenToClipboardRemove;

const stopListeningToClipboardRemove = listener => emitter && emitter.removeListener("MediaClipboardRemove", listener);

exports.stopListeningToClipboardRemove = stopListeningToClipboardRemove;

const getClipboardContents = () => {
  return new Promise((resolve, reject) => {
    if (_reactNative.Platform.OS === "android") {
      resolve({
        urls: [],
        strings: [],
        hasImages: false,
        hasURLs: false,
        hasStrings: false
      });
      return;
    }

    MediaClipboard.getContent((err, contents) => {
      if (err) {
        reject(err);
        return;
      } else {
        resolve(contents);
      }
    });
  });
};

exports.getClipboardContents = getClipboardContents;

const getClipboardMediaSource = () => {
  if (_reactNative.Platform.OS === "android") {
    return Promise.resolve(null);
  } // @ts-ignore


  if (typeof global.Clipboard !== "undefined") {
    // @ts-ignore
    return global.Clipboard.getMediaSource();
  } else {
    return new Promise(resolve => MediaClipboard.clipboardMediaSource((_, content) => {
      resolve(content);
      return;
    }));
  }
};

exports.getClipboardMediaSource = getClipboardMediaSource;
//# sourceMappingURL=MediaClipboard.js.map